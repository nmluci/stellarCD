// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: hentai.proto

package hentai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NakaZettaiDameClient is the client API for NakaZettaiDame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NakaZettaiDameClient interface {
	BookByID(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Book, error)
	Random(ctx context.Context, in *BookNoQuery, opts ...grpc.CallOption) (*Book, error)
	Search(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Books, error)
	Related(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Books, error)
	Bookmark(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Empty, error)
}

type nakaZettaiDameClient struct {
	cc grpc.ClientConnInterface
}

func NewNakaZettaiDameClient(cc grpc.ClientConnInterface) NakaZettaiDameClient {
	return &nakaZettaiDameClient{cc}
}

func (c *nakaZettaiDameClient) BookByID(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/hentai.NakaZettaiDame/BookByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakaZettaiDameClient) Random(ctx context.Context, in *BookNoQuery, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/hentai.NakaZettaiDame/Random", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakaZettaiDameClient) Search(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/hentai.NakaZettaiDame/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakaZettaiDameClient) Related(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/hentai.NakaZettaiDame/Related", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakaZettaiDameClient) Bookmark(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hentai.NakaZettaiDame/Bookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NakaZettaiDameServer is the server API for NakaZettaiDame service.
// All implementations must embed UnimplementedNakaZettaiDameServer
// for forward compatibility
type NakaZettaiDameServer interface {
	BookByID(context.Context, *BookQuery) (*Book, error)
	Random(context.Context, *BookNoQuery) (*Book, error)
	Search(context.Context, *BookQuery) (*Books, error)
	Related(context.Context, *BookQuery) (*Books, error)
	Bookmark(context.Context, *BookQuery) (*Empty, error)
	mustEmbedUnimplementedNakaZettaiDameServer()
}

// UnimplementedNakaZettaiDameServer must be embedded to have forward compatible implementations.
type UnimplementedNakaZettaiDameServer struct {
}

func (UnimplementedNakaZettaiDameServer) BookByID(context.Context, *BookQuery) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookByID not implemented")
}
func (UnimplementedNakaZettaiDameServer) Random(context.Context, *BookNoQuery) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Random not implemented")
}
func (UnimplementedNakaZettaiDameServer) Search(context.Context, *BookQuery) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedNakaZettaiDameServer) Related(context.Context, *BookQuery) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Related not implemented")
}
func (UnimplementedNakaZettaiDameServer) Bookmark(context.Context, *BookQuery) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bookmark not implemented")
}
func (UnimplementedNakaZettaiDameServer) mustEmbedUnimplementedNakaZettaiDameServer() {}

// UnsafeNakaZettaiDameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NakaZettaiDameServer will
// result in compilation errors.
type UnsafeNakaZettaiDameServer interface {
	mustEmbedUnimplementedNakaZettaiDameServer()
}

func RegisterNakaZettaiDameServer(s grpc.ServiceRegistrar, srv NakaZettaiDameServer) {
	s.RegisterService(&NakaZettaiDame_ServiceDesc, srv)
}

func _NakaZettaiDame_BookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakaZettaiDameServer).BookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hentai.NakaZettaiDame/BookByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakaZettaiDameServer).BookByID(ctx, req.(*BookQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NakaZettaiDame_Random_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookNoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakaZettaiDameServer).Random(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hentai.NakaZettaiDame/Random",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakaZettaiDameServer).Random(ctx, req.(*BookNoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NakaZettaiDame_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakaZettaiDameServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hentai.NakaZettaiDame/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakaZettaiDameServer).Search(ctx, req.(*BookQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NakaZettaiDame_Related_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakaZettaiDameServer).Related(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hentai.NakaZettaiDame/Related",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakaZettaiDameServer).Related(ctx, req.(*BookQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NakaZettaiDame_Bookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakaZettaiDameServer).Bookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hentai.NakaZettaiDame/Bookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakaZettaiDameServer).Bookmark(ctx, req.(*BookQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// NakaZettaiDame_ServiceDesc is the grpc.ServiceDesc for NakaZettaiDame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NakaZettaiDame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hentai.NakaZettaiDame",
	HandlerType: (*NakaZettaiDameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookByID",
			Handler:    _NakaZettaiDame_BookByID_Handler,
		},
		{
			MethodName: "Random",
			Handler:    _NakaZettaiDame_Random_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _NakaZettaiDame_Search_Handler,
		},
		{
			MethodName: "Related",
			Handler:    _NakaZettaiDame_Related_Handler,
		},
		{
			MethodName: "Bookmark",
			Handler:    _NakaZettaiDame_Bookmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hentai.proto",
}
